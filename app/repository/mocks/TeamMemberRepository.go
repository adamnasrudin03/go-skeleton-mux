// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/adamnasrudin03/go-skeleton-mux/app/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/adamnasrudin03/go-skeleton-mux/app/models"

	time "time"
)

// TeamMemberRepository is an autogenerated mock type for the TeamMemberRepository type
type TeamMemberRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *TeamMemberRepository) Create(ctx context.Context, req *models.TeamMember) (*models.TeamMember, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) (*models.TeamMember, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) *models.TeamMember); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.TeamMember) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCache provides a mock function with given fields: ctx, key, data, ttl
func (_m *TeamMemberRepository) CreateCache(ctx context.Context, key string, data interface{}, ttl time.Duration) {
	_m.Called(ctx, key, data, ttl)
}

// Delete provides a mock function with given fields: ctx, req
func (_m *TeamMemberRepository) Delete(ctx context.Context, req *models.TeamMember) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCache provides a mock function with given fields: ctx, key
func (_m *TeamMemberRepository) DeleteCache(ctx context.Context, key string) {
	_m.Called(ctx, key)
}

// GetCache provides a mock function with given fields: ctx, key, res
func (_m *TeamMemberRepository) GetCache(ctx context.Context, key string, res interface{}) bool {
	ret := _m.Called(ctx, key, res)

	if len(ret) == 0 {
		panic("no return value specified for GetCache")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, key, res)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetDetail provides a mock function with given fields: ctx, req
func (_m *TeamMemberRepository) GetDetail(ctx context.Context, req dto.TeamMemberDetailReq) (*models.TeamMember, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetDetail")
	}

	var r0 *models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.TeamMemberDetailReq) (*models.TeamMember, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.TeamMemberDetailReq) *models.TeamMember); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.TeamMemberDetailReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, req
func (_m *TeamMemberRepository) GetList(ctx context.Context, req dto.TeamMemberListReq) ([]models.TeamMember, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 []models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.TeamMemberListReq) ([]models.TeamMember, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.TeamMemberListReq) []models.TeamMember); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.TeamMemberListReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, req
func (_m *TeamMemberRepository) Update(ctx context.Context, req *models.TeamMember) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TeamMember) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTeamMemberRepository creates a new instance of TeamMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamMemberRepository {
	mock := &TeamMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
